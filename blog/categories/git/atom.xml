<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Calum Halcrow]]></title>
  <link href="http://calumhalcrow.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://calumhalcrow.com/"/>
  <updated>2014-10-21T12:17:32+08:00</updated>
  <id>http://calumhalcrow.com/</id>
  <author>
    <name><![CDATA[Calum Halcrow]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Export a commit range to patch files]]></title>
    <link href="http://calumhalcrow.com/blog/2014/09/03/export-a-commit-range-to-patch-files/"/>
    <updated>2014-09-03T12:40:00+08:00</updated>
    <id>http://calumhalcrow.com/blog/2014/09/03/export-a-commit-range-to-patch-files</id>
    <content type="html"><![CDATA[<p>Today I found myself in a position where a Git repo I am contributing to was to going to have its history significantly altered. Sensitive information was to be completely removed from the repo, and when done the repo would basically be a single commit on the master branch, with all other branches deleted.</p>

<!-- more -->


<p>But there were several open pull requests against master that would not get merged before this work was carried out. I had to save the commits in these PRs offline until the repo had been adjusted, then reapply them and re-open the PRs.</p>

<p>Here’s one way that this can be done:</p>

<h2>Commit range to patch files:</h2>

<p>Ensuring you have your topic branch checked out and that it has some commits on it,</p>

<p><code>bash
$ git checkout topic-branch
$ git log --oneline origin/master..
898ea0f Adds more padding to footer.
c455b4f Makes header text blue.
</code></p>

<p>you can make a patch out of each commit with the <a href="http://git-scm.com/docs/git-format-patch">git format-patch</a> command:</p>

<p><code>bash
$ git format-patch origin/master..
0001-Makes-header-text-blue.patch
0002-Adds-more-padding-to-footer.patch
</code></p>

<p>For each commit, we now have a patch file that can be saved offline and reapplied later:</p>

<p><code>bash
$ ls -l *.patch
-rw-r--r--  1 calum  staff  680 Sep  3 08:55 0001-Makes-header-text-blue.patch
-rw-r--r--  1 calum  staff  684 Sep  3 08:55 0002-Adds-more-padding-to-footer.patch
</code></p>

<p>To reapply, move the patches to a directory outside of the repo (I moved mine to my home dir), checkout master and use the <a href="http://git-scm.com/docs/git-am">git am</a> command:</p>

<p><code>bash
$ mv *.patch ~
$ git checkout master
Switched to branch ‘master'
$ git am ~/*.patch
Applying: Makes header text blue.
Applying: Adds more padding to footer.
</code></p>

<p>Now the commits have be reapplied onto master. From here you can create a new branch, push it and re-open your pull requests.</p>
]]></content>
  </entry>
  
</feed>
